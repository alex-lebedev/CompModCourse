// Inferring the Mean and Standard Deviation of a Gaussian
data {
int<lower=1> N; // number of observations
real y[N];
}
parameters {
real mu; // mean
real<lower=0> sigma; // sd
}
model {
for (i in 1:N)
y[i] ~ normal(mu, sigma);	// likelihood
mu ~ uniform(0, 100);
sigma ~ uniform(0, 100);
}
"
mu <- 10
sigma <- 5
N <- 50
y <- rnorm(N, mu, sigma)
# check the data
hist(y, 20)
# data to be passed on to Stan
data <- list(y=y, N=N)
# initialization (not always necessary)
myinits <- list(
list(mu=0, sigma=1)
)
# parameters to be monitored:
parameters <- c("mu", "sigma")
myfit <- stan(model_code=model.1,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=1000,
chains=1,
# warmup = 100,  # Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
myfit
# clears workspace:
rm(list=ls())
library(rstan)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
x <- matrix(c(90, 95, 100, 105, 110, 115, 120, 125, 140, 150, 155, 160),
nrow=3, ncol=4, byrow=T)
n <- nrow(x) # number of people
m <- ncol(x) # number of repeated measurements
data <- list(x=x, n=n, m=m)
# parameters to be monitored:
parameters <- c("mu", "sigma")
myfit <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/IQ_measures.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin = 1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
print(myfit)
plot(myfit)
# use bayesplot package
mcmc_areas(as.matrix(myfit), regex_pars = c("mu"), prob = 0.8)
mcmc_intervals(as.matrix(myfit), regex_pars = c("mu"), prob = 0.8, prob_outer = 0.95)
traceplot(myfit, pars = parameters)
traceplot(myfit, pars = parameters, inc_warmup = T)
pairs(myfit, pars = parameters)
mu <- extract(myfit)$mu
sigma <- extract(myfit)$sigma
myfit
apply(data$x,1,mean)
mu
dim(mu)
plot(mu[,1:2])
cor(mu[,1:2])
mm <- apply(mu,2,mean)
length(mm)
mm <- apply(mu,1,mean)
plot(mm,mu[,1])
cor(mm,mu[,1])
mean(mm)
hist(mm)
diff <- mu[,2]-mu[,1]
hist(diff)
t.test(diff)
quantile(diff)
mean(diff)
100/mean(diff)
mean(diff)/100
diff <- mu[,2]-mu[,1]
myfit$`mu
[1]
'
sadf
``
[1]
[1]
# clears workspace:
rm(list=ls())
library(rstan)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
x <- matrix(c(90, 95, 100, 105, 110, 115, 120, 125, 140, 150, 155, 160),
nrow=3, ncol=4, byrow=T)
n <- nrow(x) # number of people
m <- ncol(x) # number of repeated measurements
data <- list(x=x, n=n, m=m)
# parameters to be monitored:
parameters <- c("mu", "sigma")
myfit <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/IQ_measures.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin = 1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
print(myfit)
plot(myfit)
# use bayesplot package
mcmc_areas(as.matrix(myfit), regex_pars = c("mu"), prob = 0.8)
mcmc_intervals(as.matrix(myfit), regex_pars = c("mu"), prob = 0.8, prob_outer = 0.95)
traceplot(myfit, pars = parameters)
traceplot(myfit, pars = parameters, inc_warmup = T)
pairs(myfit, pars = parameters)
mu <- extract(myfit)$mu
sigma <- extract(myfit)$sigma
diff <- mu[,1]-mu[,2]
mm <- apply(mu,1,mean)
mean(diff)/100
hist(diff)
dim(diff)
length(diff)
table(diff>0)/length(diff)
table(diff>0)[2/length(diff)
]
table(diff>0)[2]/length(diff)
table(diff>0)[2]/length(diff)$T
table(diff>0)[2]/length(diff)
sum(diff>0)/length(diff)
rowMeans((mu))
dim(rowMeans((mu)))
length(rowMeans((mu)))
mu_diff <- mu[,1]-mu[,2]
sum(mu_diff>0)/length(mu_diff)
# clears workspace:
rm(list=ls())
library(rstan)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
x <- matrix(c(90, 95, 100, 105, 110, 115, 120, 125, 140, 150, 155, 160),
nrow=3, ncol=4, byrow=T)
n <- nrow(x) # number of people
m <- ncol(x) # number of repeated measurements
data <- list(x=x, n=n, m=m)
# parameters to be monitored:
parameters <- c("mu", "sigma")
myfit <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/IQ_measures.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin = 1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
print(myfit)
plot(myfit)
# use bayesplot package
mcmc_areas(as.matrix(myfit), regex_pars = c("mu"), prob = 0.8)
mcmc_intervals(as.matrix(myfit), regex_pars = c("mu"), prob = 0.8, prob_outer = 0.95)
traceplot(myfit, pars = parameters)
traceplot(myfit, pars = parameters, inc_warmup = T)
pairs(myfit, pars = parameters)
mu <- extract(myfit)$mu
sigma <- extract(myfit)$sigma
mu_diff <- mu[,1]-mu[,2]
sum(mu_diff>0)/length(mu_diff)
hist(mu_diff)
rm(list=ls())
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rm(list=ls())
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
N = 100 # number of observations
M = 5 # number of regressors
X = matrix(rnorm(N*M), N, M) # create matrix of regressors
beta <- rnorm(M + 1) # create regression coefficients, adding intercept
sigma = 1 # noise sd
y = as.numeric(cbind(1, X) %*% beta + sigma*rnorm(N)) # create some data, first column is the intercept
data <- list(N = N, M = M, X = X, y = y)
# print the coefficients
print(beta)
# parameters to be monitored:
parameters <- c("beta", "sigma")
mysamples <- stan(file='stan_models/linear_regression.stan',
data=data,
#                pars=parameters,
iter=2000,
chains=4,
thin=1
)
print(mysamples)
plot(mysamples)
pairs(mysamples, pars = parameters)
traceplot(mysamples, pars = parameters)
library(MASS)
N = 100 # number of observations
M = 3 # number of regressors
# We create a data matrix with two highly correlated regressors
mu <- rep(0,3)
Cov <- matrix(c(1, 0.8, -0.2, 0.8, 1, 0.1, -0.2, 0.1, 1), 3, 3)
X <- mvrnorm(n=N, mu=mu, Sigma=Cov)
beta <- rnorm(M + 1) # create regression coefficients, adding intercept
sigma = 1 # noise sd
y = as.numeric(cbind(1, X) %*% beta + sigma*rnorm(N)) # create some data, first column is the intercept
data <- list(N = N, M = M, X = X, y = y)
# print out correlation of regressors and coefficients
print(cor(X))
print(beta)
# parameters to be monitored:
parameters <- c("beta", "sigma")
mysamples <- stan(file='stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
print(mysamples)
plot(mysamples)
pairs(mysamples, pars = c("beta"))
data
dim(data)
dim(data$N)
dim(data$M)
dim(data$y)
length(data$y)
length(data$N)
length(data$M)
rm(list=ls())
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
N = 100 # number of observations
M = 5 # number of regressors
X = matrix(rnorm(N*M), N, M) # create matrix of regressors
beta <- rnorm(M + 1) # create regression coefficients, adding intercept
sigma = 1 # noise sd
y = as.numeric(cbind(1, X) %*% beta + sigma*rnorm(N)) # create some data, first column is the intercept
data <- list(N = N, M = M, X = X, y = y)
# print the coefficients
print(beta)
# parameters to be monitored:
parameters <- c("beta", "sigma")
mysamples <- stan(file='stan_models/linear_regression.stan',
data=data,
#                pars=parameters,
iter=2000,
chains=4,
thin=1
)
print(mysamples)
plot(mysamples)
pairs(mysamples, pars = parameters)
traceplot(mysamples, pars = parameters)
library(MASS)
N = 100 # number of observations
M = 3 # number of regressors
# We create a data matrix with two highly correlated regressors
mu <- rep(0,3)
Cov <- matrix(c(1, 0.8, -0.2, 0.8, 1, 0.1, -0.2, 0.1, 1), 3, 3)
X <- mvrnorm(n=N, mu=mu, Sigma=Cov)
beta <- rnorm(M + 1) # create regression coefficients, adding intercept
sigma = 1 # noise sd
y = as.numeric(cbind(1, X) %*% beta + sigma*rnorm(N)) # create some data, first column is the intercept
data <- list(N = N, M = M, X = X, y = y)
# print out correlation of regressors and coefficients
print(cor(X))
print(beta)
# parameters to be monitored:
parameters <- c("beta", "sigma")
mysamples <- stan(file='stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
print(mysamples)
plot(mysamples)
pairs(mysamples, pars = c("beta"))
betas <- extract(mysamples)$beta
newbetas <- apply(betas,1,mean)
plot(betas, newbetas)
newbetas
dim(newbetas)
length(newbetas)
length(betas)
dim(betas)
newbetas <- apply(betas,1,mean)
length(newbetas)
length(betas)
extract(mysamples)$beta
dim(extract(mysamples)$beta)
betas <- extract(mysamples)$beta
newbetas <- apply(betas,2,mean)
dim(newbetas)
newbetas
betas <- apply(extract(mysamples)$beta,2,mean)
newbetas <- apply(betas,2,mean)
plot(betas, newbetas)
mysamples <- stan(file='stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
data <- list(N = N, M = M, X = X, y = y,N_new = N, M_new = M, X_new = X, y_new = y)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
data <- list(N = N, M = M, X = X, y = y,N_new = N, M_new = M, X_new = X)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
mysamples
data <- list(N = N, M = M, X = X, y = y, N_new = N, M_new = M, X_new = X)
N
M
extract(mysamples)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
X_new <- X
data <- list(N = N, M = M, X = X, y = y)
N_new = N; M_new = M; X_new = X
N_new = N+rnorm(1,2); M_new = M; X_new = X
N_new = N+rnorm(1,2); M_new = M+rnorm(1,2); X_new = X+rnorm(1,2)
data <- list(N = N, M = M, X = X, y = y, N_new = N, M_new = M_new, X_new = X_new)
N_new <- N
M_new <- M
data <- list(N = N, M = M, X = X, y = y, N_new = N, M_new = M_new, X_new = X_new)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
dim(beta)
dim(betas)
length(beta)
dim(X_new)
head(X_new)
X_new <- cbind(1,X_new)
head(X_new)
data <- list(N = N, M = M, X = X, y = y, N_new = N, M_new = M_new, X_new = X_new)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
N_new = N+rnorm(1,2); M_new = M+rnorm(1,2); X_new = X+rnorm(1,2)
N_new = N; M_new = M; X_new = X+rnorm(1,2)
data <- list(N = N, M = M, X = X, y = y, N_new = N, M_new = M_new, X_new = X_new)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
N_new
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
mysamples <- stan(file='/Users/alebedev/GitHub/CompModCourse/Day2/Stan_tutorial_day2/stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=1,
thin=1
)
parameters <- c("beta", "sigma")
mysamples <- stan(file='stan_models/linear_regression.stan',
data=data,
pars=parameters,
iter=2000,
chains=4,
thin=1
)
summary(mysamples)
